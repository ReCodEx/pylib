# coding: utf-8

"""
    ReCodEx API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import unittest

import swagger_client
from swagger_client.api.default_api import DefaultApi  # noqa: E501
from swagger_client.rest import ApiException


class TestDefaultApi(unittest.TestCase):
    """DefaultApi unit test stubs"""

    def setUp(self):
        self.api = DefaultApi()  # noqa: E501

    def tearDown(self):
        pass

    def test_assignment_solution_reviews_default(self):
        """Test case for assignment_solution_reviews_default

        Get detail of the solution and a list of review comments.  # noqa: E501
        """
        pass

    def test_assignment_solution_reviews_delete_comment(self):
        """Test case for assignment_solution_reviews_delete_comment

        Remove one comment from a review.  # noqa: E501
        """
        pass

    def test_assignment_solution_reviews_edit_comment(self):
        """Test case for assignment_solution_reviews_edit_comment

        Update existing comment within a review.  # noqa: E501
        """
        pass

    def test_assignment_solution_reviews_new_comment(self):
        """Test case for assignment_solution_reviews_new_comment

        Create a new comment within a review.  # noqa: E501
        """
        pass

    def test_assignment_solution_reviews_pending(self):
        """Test case for assignment_solution_reviews_pending

        Return all solutions with pending reviews that given user teaches (is admin/supervisor in corresponding groups). Along with that it returns all assignment entities of the corresponding solutions.  # noqa: E501
        """
        pass

    def test_assignment_solution_reviews_remove(self):
        """Test case for assignment_solution_reviews_remove

        Update the state of the review process of the solution.  # noqa: E501
        """
        pass

    def test_assignment_solution_reviews_update(self):
        """Test case for assignment_solution_reviews_update

        Update the state of the review process of the solution.  # noqa: E501
        """
        pass

    def test_assignment_solutions_delete_solution(self):
        """Test case for assignment_solutions_delete_solution

        Delete assignment solution with given identification.  # noqa: E501
        """
        pass

    def test_assignment_solutions_delete_submission(self):
        """Test case for assignment_solutions_delete_submission

        Remove the submission permanently  # noqa: E501
        """
        pass

    def test_assignment_solutions_download_result_archive(self):
        """Test case for assignment_solutions_download_result_archive

        Download result archive from backend for particular submission.  # noqa: E501
        """
        pass

    def test_assignment_solutions_download_solution_archive(self):
        """Test case for assignment_solutions_download_solution_archive

        Download archive containing all solution files for particular solution.  # noqa: E501
        """
        pass

    def test_assignment_solutions_evaluation_score_config(self):
        """Test case for assignment_solutions_evaluation_score_config

        Get score configuration associated with given submission evaluation  # noqa: E501
        """
        pass

    def test_assignment_solutions_files(self):
        """Test case for assignment_solutions_files

        Get the list of submitted files of the solution.  # noqa: E501
        """
        pass

    def test_assignment_solutions_review_requests(self):
        """Test case for assignment_solutions_review_requests

        Return all solutions with reviewRequest flag that given user might need to review (is admin/supervisor in corresponding groups). Along with that it returns all assignment entities of the corresponding solutions.  # noqa: E501
        """
        pass

    def test_assignment_solutions_set_bonus_points(self):
        """Test case for assignment_solutions_set_bonus_points

        Set new amount of bonus points for a solution (and optionally points override) Returns array of solution entities that has been changed by this.  # noqa: E501
        """
        pass

    def test_assignment_solutions_set_flag(self):
        """Test case for assignment_solutions_set_flag

        Set flag of the assignment solution.  # noqa: E501
        """
        pass

    def test_assignment_solutions_solution(self):
        """Test case for assignment_solutions_solution

        Get information about solutions.  # noqa: E501
        """
        pass

    def test_assignment_solutions_submission(self):
        """Test case for assignment_solutions_submission

        Get information about the evaluation of a submission  # noqa: E501
        """
        pass

    def test_assignment_solutions_submissions(self):
        """Test case for assignment_solutions_submissions

        Get list of all submissions of a solution  # noqa: E501
        """
        pass

    def test_assignment_solutions_update_solution(self):
        """Test case for assignment_solutions_update_solution

        Update details about the solution (note, etc...)  # noqa: E501
        """
        pass

    def test_assignment_solvers_default(self):
        """Test case for assignment_solvers_default

        Get a list of assignment solvers based on given parameters (assignment/group and solver user). Either assignment or group ID must be set (group is ignored if assignment is set), user ID is optional.  # noqa: E501
        """
        pass

    def test_assignments_best_solution(self):
        """Test case for assignments_best_solution

        Get the best solution by a user to an assignment  # noqa: E501
        """
        pass

    def test_assignments_best_solutions(self):
        """Test case for assignments_best_solutions

        Get the best solutions to an assignment for all students in group.  # noqa: E501
        """
        pass

    def test_assignments_create(self):
        """Test case for assignments_create

        Assign an exercise to a group  # noqa: E501
        """
        pass

    def test_assignments_detail(self):
        """Test case for assignments_detail

        Get details of an assignment  # noqa: E501
        """
        pass

    def test_assignments_download_best_solutions_archive(self):
        """Test case for assignments_download_best_solutions_archive

        Download the best solutions of an assignment for all students in group.  # noqa: E501
        """
        pass

    def test_assignments_remove(self):
        """Test case for assignments_remove

        Delete an assignment  # noqa: E501
        """
        pass

    def test_assignments_solutions(self):
        """Test case for assignments_solutions

        Get a list of solutions of all users for the assignment  # noqa: E501
        """
        pass

    def test_assignments_sync_with_exercise(self):
        """Test case for assignments_sync_with_exercise

        Update the assignment so that it matches with the current version of the exercise (limits, texts, etc.)  # noqa: E501
        """
        pass

    def test_assignments_update_detail(self):
        """Test case for assignments_update_detail

        Update details of an assignment  # noqa: E501
        """
        pass

    def test_assignments_user_solutions(self):
        """Test case for assignments_user_solutions

        Get a list of solutions created by a user of an assignment  # noqa: E501
        """
        pass

    def test_assignments_validate(self):
        """Test case for assignments_validate

        Check if the version of the assignment is up-to-date.  # noqa: E501
        """
        pass

    def test_async_jobs_abort(self):
        """Test case for async_jobs_abort

        Retrieves details about particular async job.  # noqa: E501
        """
        pass

    def test_async_jobs_assignment_jobs(self):
        """Test case for async_jobs_assignment_jobs

        Get all pending async jobs related to a particular assignment.  # noqa: E501
        """
        pass

    def test_async_jobs_default(self):
        """Test case for async_jobs_default

        Retrieves details about particular async job.  # noqa: E501
        """
        pass

    def test_async_jobs_list(self):
        """Test case for async_jobs_list

        Retrieves details about async jobs that are either pending or were recently completed.  # noqa: E501
        """
        pass

    def test_async_jobs_ping(self):
        """Test case for async_jobs_ping

        Initiates ping job. An empty job designed to verify the async handler is running.  # noqa: E501
        """
        pass

    def test_broker_freeze(self):
        """Test case for broker_freeze

        Freeze broker and its execution.  # noqa: E501
        """
        pass

    def test_broker_reports_error(self):
        """Test case for broker_reports_error

        Announce a backend error that is not related to any job (meant to be called by the backend)  # noqa: E501
        """
        pass

    def test_broker_reports_job_status(self):
        """Test case for broker_reports_job_status

        Update the status of a job (meant to be called by the backend)  # noqa: E501
        """
        pass

    def test_broker_stats(self):
        """Test case for broker_stats

        Get current statistics from broker.  # noqa: E501
        """
        pass

    def test_broker_unfreeze(self):
        """Test case for broker_unfreeze

        Unfreeze broker and its execution.  # noqa: E501
        """
        pass

    def test_comments_add_comment(self):
        """Test case for comments_add_comment

        Add a comment to a thread  # noqa: E501
        """
        pass

    def test_comments_default(self):
        """Test case for comments_default

        Get a comment thread  # noqa: E501
        """
        pass

    def test_comments_delete(self):
        """Test case for comments_delete

        Delete a comment  # noqa: E501
        """
        pass

    def test_comments_set_private(self):
        """Test case for comments_set_private

        Set the private flag of a comment  # noqa: E501
        """
        pass

    def test_comments_toggle_private(self):
        """Test case for comments_toggle_private

        Make a private comment public or vice versa  # noqa: E501
        """
        pass

    def test_email_verification_email_verification(self):
        """Test case for email_verification_email_verification

        Verify users email.  # noqa: E501
        """
        pass

    def test_email_verification_resend_verification_email(self):
        """Test case for email_verification_resend_verification_email

        Resend the email for the current user to verify his/her email address.  # noqa: E501
        """
        pass

    def test_emails_default(self):
        """Test case for emails_default

        Sends an email with provided subject and message to all ReCodEx users.  # noqa: E501
        """
        pass

    def test_emails_send_to_group_members(self):
        """Test case for emails_send_to_group_members

        Sends an email with provided subject and message to regular members of given group and optionally to supervisors and admins.  # noqa: E501
        """
        pass

    def test_emails_send_to_regular_users(self):
        """Test case for emails_send_to_regular_users

        Sends an email with provided subject and message to all regular users.  # noqa: E501
        """
        pass

    def test_emails_send_to_supervisors(self):
        """Test case for emails_send_to_supervisors

        Sends an email with provided subject and message to all supervisors and superadmins.  # noqa: E501
        """
        pass

    def test_exercise_files_delete_attachment_file(self):
        """Test case for exercise_files_delete_attachment_file

        Delete attachment exercise file with given id  # noqa: E501
        """
        pass

    def test_exercise_files_delete_supplementary_file(self):
        """Test case for exercise_files_delete_supplementary_file

        Delete supplementary exercise file with given id  # noqa: E501
        """
        pass

    def test_exercise_files_download_attachment_files_archive(self):
        """Test case for exercise_files_download_attachment_files_archive

        Download archive containing all attachment files for exercise.  # noqa: E501
        """
        pass

    def test_exercise_files_download_supplementary_files_archive(self):
        """Test case for exercise_files_download_supplementary_files_archive

        Download archive containing all supplementary files for exercise.  # noqa: E501
        """
        pass

    def test_exercise_files_get_attachment_files(self):
        """Test case for exercise_files_get_attachment_files

        Get a list of all attachment files for an exercise  # noqa: E501
        """
        pass

    def test_exercise_files_get_supplementary_files(self):
        """Test case for exercise_files_get_supplementary_files

        Get list of all supplementary files for an exercise  # noqa: E501
        """
        pass

    def test_exercise_files_upload_attachment_files(self):
        """Test case for exercise_files_upload_attachment_files

        Associate attachment exercise files with an exercise  # noqa: E501
        """
        pass

    def test_exercise_files_upload_supplementary_files(self):
        """Test case for exercise_files_upload_supplementary_files

        Associate supplementary files with an exercise and upload them to remote file server  # noqa: E501
        """
        pass

    def test_exercises_add_tag(self):
        """Test case for exercises_add_tag

        Add tag with given name to the exercise.  # noqa: E501
        """
        pass

    def test_exercises_all_tags(self):
        """Test case for exercises_all_tags

        Get list of global exercise tag names which are currently registered.  # noqa: E501
        """
        pass

    def test_exercises_assignments(self):
        """Test case for exercises_assignments

        Get all non-archived assignments created from this exercise.  # noqa: E501
        """
        pass

    def test_exercises_attach_group(self):
        """Test case for exercises_attach_group

        Attach exercise to group with given identification.  # noqa: E501
        """
        pass

    def test_exercises_authors(self):
        """Test case for exercises_authors

        List authors of all exercises, possibly filtered by a group in which the exercises appear.  # noqa: E501
        """
        pass

    def test_exercises_config_get_configuration(self):
        """Test case for exercises_config_get_configuration

        Get a basic exercise high level configuration.  # noqa: E501
        """
        pass

    def test_exercises_config_get_environment_configs(self):
        """Test case for exercises_config_get_environment_configs

        Get runtime configurations for exercise.  # noqa: E501
        """
        pass

    def test_exercises_config_get_hardware_group_limits(self):
        """Test case for exercises_config_get_hardware_group_limits

        Get a description of resource limits for an exercise for given hwgroup.  # noqa: E501
        """
        pass

    def test_exercises_config_get_limits(self):
        """Test case for exercises_config_get_limits

        Get a description of resource limits for given exercise (all hwgroups all environments).  # noqa: E501
        """
        pass

    def test_exercises_config_get_score_config(self):
        """Test case for exercises_config_get_score_config

        Get score configuration for exercise based on given identification.  # noqa: E501
        """
        pass

    def test_exercises_config_get_tests(self):
        """Test case for exercises_config_get_tests

        Get tests for exercise based on given identification.  # noqa: E501
        """
        pass

    def test_exercises_config_get_variables_for_exercise_config(self):
        """Test case for exercises_config_get_variables_for_exercise_config

        Get variables for exercise configuration which are derived from given pipelines and runtime environment.  # noqa: E501
        """
        pass

    def test_exercises_config_remove_hardware_group_limits(self):
        """Test case for exercises_config_remove_hardware_group_limits

        Remove resource limits of given hwgroup from an exercise.  # noqa: E501
        """
        pass

    def test_exercises_config_set_configuration(self):
        """Test case for exercises_config_set_configuration

        Set basic exercise configuration  # noqa: E501
        """
        pass

    def test_exercises_config_set_hardware_group_limits(self):
        """Test case for exercises_config_set_hardware_group_limits

        Set resource limits for an exercise for given hwgroup.  # noqa: E501
        """
        pass

    def test_exercises_config_set_limits(self):
        """Test case for exercises_config_set_limits

        Update resource limits for given exercise. If limits for particular hwGroup or environment are not posted, no change occurs. If limits for particular hwGroup or environment are posted as null, they are removed.  # noqa: E501
        """
        pass

    def test_exercises_config_set_score_config(self):
        """Test case for exercises_config_set_score_config

        Set score configuration for exercise.  # noqa: E501
        """
        pass

    def test_exercises_config_set_tests(self):
        """Test case for exercises_config_set_tests

        Set tests for exercise based on given identification.  # noqa: E501
        """
        pass

    def test_exercises_config_update_environment_configs(self):
        """Test case for exercises_config_update_environment_configs

        Change runtime configuration of exercise. Configurations can be added or deleted here, based on what is provided in arguments.  # noqa: E501
        """
        pass

    def test_exercises_create(self):
        """Test case for exercises_create

        Create exercise with all default values. Exercise detail can be then changed in appropriate endpoint.  # noqa: E501
        """
        pass

    def test_exercises_default(self):
        """Test case for exercises_default

        Get a list of all exercises matching given filters in given pagination rage. The result conforms to pagination protocol.  # noqa: E501
        """
        pass

    def test_exercises_detach_group(self):
        """Test case for exercises_detach_group

        Detach exercise from given group.  # noqa: E501
        """
        pass

    def test_exercises_detail(self):
        """Test case for exercises_detail

        Get details of an exercise  # noqa: E501
        """
        pass

    def test_exercises_fork_from(self):
        """Test case for exercises_fork_from

        Fork exercise from given one into the completely new one.  # noqa: E501
        """
        pass

    def test_exercises_hardware_groups(self):
        """Test case for exercises_hardware_groups

        Set hardware groups which are associated with exercise.  # noqa: E501
        """
        pass

    def test_exercises_list_by_ids(self):
        """Test case for exercises_list_by_ids

        Get a list of exercises based on given ids.  # noqa: E501
        """
        pass

    def test_exercises_remove(self):
        """Test case for exercises_remove

        Delete an exercise  # noqa: E501
        """
        pass

    def test_exercises_remove_tag(self):
        """Test case for exercises_remove_tag

        Remove tag with given name from exercise.  # noqa: E501
        """
        pass

    def test_exercises_send_notification(self):
        """Test case for exercises_send_notification

        Sends an email to all group admins and supervisors, where the exercise is assigned. The purpose of this is to quickly notify all relevant teachers when a bug is found or the exercise is modified significantly. The response is number of emails sent (number of notified users).  # noqa: E501
        """
        pass

    def test_exercises_set_admins(self):
        """Test case for exercises_set_admins

        Change who the admins of an exercise are (all users on the list are added, prior admins not on the list are removed).  # noqa: E501
        """
        pass

    def test_exercises_set_archived(self):
        """Test case for exercises_set_archived

        (Un)mark the exercise as archived. Nothing happens if the exercise is already in the requested state.  # noqa: E501
        """
        pass

    def test_exercises_set_author(self):
        """Test case for exercises_set_author

        Change the author of the exercise. This is a very special operation reserved for powerful users.  # noqa: E501
        """
        pass

    def test_exercises_tags_stats(self):
        """Test case for exercises_tags_stats

        Get list of global exercise tag names along with how many times they have been used.  # noqa: E501
        """
        pass

    def test_exercises_tags_update_global(self):
        """Test case for exercises_tags_update_global

        Update the tag globally. At the moment, the only 'update' function is 'rename'. Other types of updates may be implemented in the future.  # noqa: E501
        """
        pass

    def test_exercises_update_detail(self):
        """Test case for exercises_update_detail

        Update detail of an exercise  # noqa: E501
        """
        pass

    def test_exercises_validate(self):
        """Test case for exercises_validate

        Check if the version of the exercise is up-to-date.  # noqa: E501
        """
        pass

    def test_extensions_token(self):
        """Test case for extensions_token

        This endpoint is used by a backend of an extension to get a proper access token (from a temp token passed via URL). It also returns details about authenticated user.  # noqa: E501
        """
        pass

    def test_extensions_url(self):
        """Test case for extensions_url

        Return URL refering to the extension with properly injected temporary JWT token.  # noqa: E501
        """
        pass

    def test_forgotten_password_change(self):
        """Test case for forgotten_password_change

        Change the user's password  # noqa: E501
        """
        pass

    def test_forgotten_password_default(self):
        """Test case for forgotten_password_default

        Request a password reset (user will receive an e-mail that prompts them to reset their password)  # noqa: E501
        """
        pass

    def test_forgotten_password_validate_password_strength(self):
        """Test case for forgotten_password_validate_password_strength

        Check if a password is strong enough  # noqa: E501
        """
        pass

    def test_group_external_attributes_add(self):
        """Test case for group_external_attributes_add

        Create an external attribute for given group.  # noqa: E501
        """
        pass

    def test_group_external_attributes_default(self):
        """Test case for group_external_attributes_default

        Return all attributes that correspond to given filtering parameters.  # noqa: E501
        """
        pass

    def test_group_external_attributes_remove(self):
        """Test case for group_external_attributes_remove

        Remove selected attribute  # noqa: E501
        """
        pass

    def test_group_invitations_accept(self):
        """Test case for group_invitations_accept

        Allow the current user to join the corresponding group using the invitation.  # noqa: E501
        """
        pass

    def test_group_invitations_create(self):
        """Test case for group_invitations_create

        Create a new invitation for given group.  # noqa: E501
        """
        pass

    def test_group_invitations_default(self):
        """Test case for group_invitations_default

        Return invitation details including all relevant group entities (so a name can be constructed).  # noqa: E501
        """
        pass

    def test_group_invitations_list(self):
        """Test case for group_invitations_list

        List all invitations of a group.  # noqa: E501
        """
        pass

    def test_group_invitations_remove(self):
        """Test case for group_invitations_remove

        """
        pass

    def test_group_invitations_update(self):
        """Test case for group_invitations_update

        Edit the invitation.  # noqa: E501
        """
        pass

    def test_groups_add_group(self):
        """Test case for groups_add_group

        Create a new group  # noqa: E501
        """
        pass

    def test_groups_add_member(self):
        """Test case for groups_add_member

        Add/update a membership (other than student) for given user  # noqa: E501
        """
        pass

    def test_groups_add_student(self):
        """Test case for groups_add_student

        Add a student to a group  # noqa: E501
        """
        pass

    def test_groups_assignments(self):
        """Test case for groups_assignments

        Get all exercise assignments for a group  # noqa: E501
        """
        pass

    def test_groups_default(self):
        """Test case for groups_default

        Get a list of all non-archived groups a user can see. The return set is filtered by parameters.  # noqa: E501
        """
        pass

    def test_groups_detail(self):
        """Test case for groups_detail

        Get details of a group  # noqa: E501
        """
        pass

    def test_groups_get_exam_locks(self):
        """Test case for groups_get_exam_locks

        Retrieve a list of locks for given exam  # noqa: E501
        """
        pass

    def test_groups_lock_student(self):
        """Test case for groups_lock_student

        Lock student in a group and with an IP from which the request was made.  # noqa: E501
        """
        pass

    def test_groups_members(self):
        """Test case for groups_members

        Get a list of members of a group  # noqa: E501
        """
        pass

    def test_groups_relocate(self):
        """Test case for groups_relocate

        Relocate the group under a different parent.  # noqa: E501
        """
        pass

    def test_groups_remove_exam_period(self):
        """Test case for groups_remove_exam_period

        Change the group back to regular group (remove information about an exam).  # noqa: E501
        """
        pass

    def test_groups_remove_group(self):
        """Test case for groups_remove_group

        Delete a group  # noqa: E501
        """
        pass

    def test_groups_remove_member(self):
        """Test case for groups_remove_member

        Remove a member (other than student) from a group  # noqa: E501
        """
        pass

    def test_groups_remove_student(self):
        """Test case for groups_remove_student

        Remove a student from a group  # noqa: E501
        """
        pass

    def test_groups_set_archived(self):
        """Test case for groups_set_archived

        Set the 'isArchived' flag for a group  # noqa: E501
        """
        pass

    def test_groups_set_exam_period(self):
        """Test case for groups_set_exam_period

        Set an examination period (in the future) when the group will be secured for submitting. Only locked students may submit solutions in the group during this period. This endpoint is also used to update already planned exam period, but only dates in the future can be editted (e.g., once an exam begins, the beginning may no longer be updated).  # noqa: E501
        """
        pass

    def test_groups_set_organizational(self):
        """Test case for groups_set_organizational

        Set the 'isOrganizational' flag for a group  # noqa: E501
        """
        pass

    def test_groups_shadow_assignments(self):
        """Test case for groups_shadow_assignments

        Get all shadow assignments for a group  # noqa: E501
        """
        pass

    def test_groups_stats(self):
        """Test case for groups_stats

        Get statistics of a group. If the user does not have the rights to view all of these, try to at least return their statistics.  # noqa: E501
        """
        pass

    def test_groups_students_solutions(self):
        """Test case for groups_students_solutions

        Get all solutions of a single student from all assignments in a group  # noqa: E501
        """
        pass

    def test_groups_students_stats(self):
        """Test case for groups_students_stats

        Get statistics of a single student in a group  # noqa: E501
        """
        pass

    def test_groups_subgroups(self):
        """Test case for groups_subgroups

        Get a list of subgroups of a group  # noqa: E501
        """
        pass

    def test_groups_unlock_student(self):
        """Test case for groups_unlock_student

        Unlock a student currently locked in a group.  # noqa: E501
        """
        pass

    def test_groups_update_group(self):
        """Test case for groups_update_group

        Update group info  # noqa: E501
        """
        pass

    def test_groups_validate_add_group_data(self):
        """Test case for groups_validate_add_group_data

        Validate group creation data  # noqa: E501
        """
        pass

    def test_hardware_groups_default(self):
        """Test case for hardware_groups_default

        Get a list of all hardware groups in system  # noqa: E501
        """
        pass

    def test_instances_create_instance(self):
        """Test case for instances_create_instance

        Create a new instance  # noqa: E501
        """
        pass

    def test_instances_create_licence(self):
        """Test case for instances_create_licence

        Create a new license for an instance  # noqa: E501
        """
        pass

    def test_instances_default(self):
        """Test case for instances_default

        Get a list of all instances  # noqa: E501
        """
        pass

    def test_instances_delete_instance(self):
        """Test case for instances_delete_instance

        Delete an instance  # noqa: E501
        """
        pass

    def test_instances_delete_licence(self):
        """Test case for instances_delete_licence

        Remove existing license for an instance  # noqa: E501
        """
        pass

    def test_instances_detail(self):
        """Test case for instances_detail

        Get details of an instance  # noqa: E501
        """
        pass

    def test_instances_licences(self):
        """Test case for instances_licences

        Get a list of licenses associated with an instance  # noqa: E501
        """
        pass

    def test_instances_update_instance(self):
        """Test case for instances_update_instance

        Update an instance  # noqa: E501
        """
        pass

    def test_instances_update_licence(self):
        """Test case for instances_update_licence

        Update an existing license for an instance  # noqa: E501
        """
        pass

    def test_login_default(self):
        """Test case for login_default

        Log in using user credentials  # noqa: E501
        """
        pass

    def test_login_external(self):
        """Test case for login_external

        Log in using an external authentication service  # noqa: E501
        """
        pass

    def test_login_issue_restricted_token(self):
        """Test case for login_issue_restricted_token

        Issue a new access token with a restricted set of scopes  # noqa: E501
        """
        pass

    def test_login_refresh(self):
        """Test case for login_refresh

        Refresh the access token of current user  # noqa: E501
        """
        pass

    def test_login_take_over(self):
        """Test case for login_take_over

        Takeover user account with specified user identification.  # noqa: E501
        """
        pass

    def test_notifications_all(self):
        """Test case for notifications_all

        Get all notifications in the system.  # noqa: E501
        """
        pass

    def test_notifications_create(self):
        """Test case for notifications_create

        Create notification with given attributes  # noqa: E501
        """
        pass

    def test_notifications_default(self):
        """Test case for notifications_default

        Get all notifications which are currently active. If groupsIds is given returns only the ones from given groups (and their ancestors) and global ones (without group).  # noqa: E501
        """
        pass

    def test_notifications_remove(self):
        """Test case for notifications_remove

        Delete a notification  # noqa: E501
        """
        pass

    def test_notifications_update(self):
        """Test case for notifications_update

        Update notification  # noqa: E501
        """
        pass

    def test_pipelines_create_pipeline(self):
        """Test case for pipelines_create_pipeline

        Create a brand new pipeline.  # noqa: E501
        """
        pass

    def test_pipelines_default(self):
        """Test case for pipelines_default

        Get a list of pipelines with an optional filter, ordering, and pagination pruning. The result conforms to pagination protocol.  # noqa: E501
        """
        pass

    def test_pipelines_delete_supplementary_file(self):
        """Test case for pipelines_delete_supplementary_file

        Delete supplementary pipeline file with given id  # noqa: E501
        """
        pass

    def test_pipelines_fork_pipeline(self):
        """Test case for pipelines_fork_pipeline

        Create a complete copy of given pipeline.  # noqa: E501
        """
        pass

    def test_pipelines_get_default_boxes(self):
        """Test case for pipelines_get_default_boxes

        Get a list of default boxes which might be used in pipeline.  # noqa: E501
        """
        pass

    def test_pipelines_get_pipeline(self):
        """Test case for pipelines_get_pipeline

        Get pipeline based on given identification.  # noqa: E501
        """
        pass

    def test_pipelines_get_pipeline_exercises(self):
        """Test case for pipelines_get_pipeline_exercises

        Get all exercises that use given pipeline. Only bare minimum is retrieved for each exercise (localized name and author).  # noqa: E501
        """
        pass

    def test_pipelines_get_supplementary_files(self):
        """Test case for pipelines_get_supplementary_files

        Get list of all supplementary files for a pipeline  # noqa: E501
        """
        pass

    def test_pipelines_remove_pipeline(self):
        """Test case for pipelines_remove_pipeline

        Delete an pipeline  # noqa: E501
        """
        pass

    def test_pipelines_update_pipeline(self):
        """Test case for pipelines_update_pipeline

        Update pipeline with given data.  # noqa: E501
        """
        pass

    def test_pipelines_update_runtime_environments(self):
        """Test case for pipelines_update_runtime_environments

        Set runtime environments associated with given pipeline.  # noqa: E501
        """
        pass

    def test_pipelines_upload_supplementary_files(self):
        """Test case for pipelines_upload_supplementary_files

        Associate supplementary files with a pipeline and upload them to remote file server  # noqa: E501
        """
        pass

    def test_pipelines_validate_pipeline(self):
        """Test case for pipelines_validate_pipeline

        Check if the version of the pipeline is up-to-date.  # noqa: E501
        """
        pass

    def test_plagiarism_add_similarities(self):
        """Test case for plagiarism_add_similarities

        Appends one detected similarity record (similarities associated with one file and one other author) into a detected batch. This division was selected to make the appends relatively small and managable.  # noqa: E501
        """
        pass

    def test_plagiarism_batch_detail(self):
        """Test case for plagiarism_batch_detail

        Fetch a detail of a particular batch record.  # noqa: E501
        """
        pass

    def test_plagiarism_create_batch(self):
        """Test case for plagiarism_create_batch

        Create new detection batch record  # noqa: E501
        """
        pass

    def test_plagiarism_get_similarities(self):
        """Test case for plagiarism_get_similarities

        Retrieve detected plagiarism records from a specific batch related to one solution. Returns a list of detected similarities entities (similar file records are nested within).  # noqa: E501
        """
        pass

    def test_plagiarism_list_batches(self):
        """Test case for plagiarism_list_batches

        Get a list of all batches, optionally filtered by query params.  # noqa: E501
        """
        pass

    def test_plagiarism_update_batch(self):
        """Test case for plagiarism_update_batch

        Update dectection bath record. At the momeny, only the uploadCompletedAt can be changed.  # noqa: E501
        """
        pass

    def test_reference_exercise_solutions_delete_reference_solution(self):
        """Test case for reference_exercise_solutions_delete_reference_solution

        Delete reference solution with given identification.  # noqa: E501
        """
        pass

    def test_reference_exercise_solutions_delete_submission(self):
        """Test case for reference_exercise_solutions_delete_submission

        Remove reference solution evaluation (submission) permanently.  # noqa: E501
        """
        pass

    def test_reference_exercise_solutions_detail(self):
        """Test case for reference_exercise_solutions_detail

        Get details of a reference solution  # noqa: E501
        """
        pass

    def test_reference_exercise_solutions_download_result_archive(self):
        """Test case for reference_exercise_solutions_download_result_archive

        Download result archive from backend for a reference solution evaluation  # noqa: E501
        """
        pass

    def test_reference_exercise_solutions_download_solution_archive(self):
        """Test case for reference_exercise_solutions_download_solution_archive

        Download archive containing all solution files for particular reference solution.  # noqa: E501
        """
        pass

    def test_reference_exercise_solutions_evaluation_score_config(self):
        """Test case for reference_exercise_solutions_evaluation_score_config

        Get score configuration associated with given submission evaluation  # noqa: E501
        """
        pass

    def test_reference_exercise_solutions_files(self):
        """Test case for reference_exercise_solutions_files

        Get the list of submitted files of the solution.  # noqa: E501
        """
        pass

    def test_reference_exercise_solutions_pre_submit(self):
        """Test case for reference_exercise_solutions_pre_submit

        Pre submit action which will, based on given files, detect possible runtime environments for the exercise. Also it can be further used for entry points and other important things that should be provided by user during submit.  # noqa: E501
        """
        pass

    def test_reference_exercise_solutions_resubmit(self):
        """Test case for reference_exercise_solutions_resubmit

        Evaluate a single reference exercise solution for all configured hardware groups  # noqa: E501
        """
        pass

    def test_reference_exercise_solutions_resubmit_all(self):
        """Test case for reference_exercise_solutions_resubmit_all

        Evaluate all reference solutions for an exercise (and for all configured hardware groups).  # noqa: E501
        """
        pass

    def test_reference_exercise_solutions_set_visibility(self):
        """Test case for reference_exercise_solutions_set_visibility

        Set visibility of given reference solution.  # noqa: E501
        """
        pass

    def test_reference_exercise_solutions_solutions(self):
        """Test case for reference_exercise_solutions_solutions

        Get reference solutions for an exercise  # noqa: E501
        """
        pass

    def test_reference_exercise_solutions_submission(self):
        """Test case for reference_exercise_solutions_submission

        Get reference solution evaluation (i.e., submission) for an exercise solution.  # noqa: E501
        """
        pass

    def test_reference_exercise_solutions_submissions(self):
        """Test case for reference_exercise_solutions_submissions

        Get a list of submissions for given reference solution.  # noqa: E501
        """
        pass

    def test_reference_exercise_solutions_submit(self):
        """Test case for reference_exercise_solutions_submit

        Add new reference solution to an exercise  # noqa: E501
        """
        pass

    def test_reference_exercise_solutions_update(self):
        """Test case for reference_exercise_solutions_update

        Update details about the ref. solution (note, etc...)  # noqa: E501
        """
        pass

    def test_registration_accept_invitation(self):
        """Test case for registration_accept_invitation

        Accept invitation and create corresponding user account.  # noqa: E501
        """
        pass

    def test_registration_create_account(self):
        """Test case for registration_create_account

        Create a user account  # noqa: E501
        """
        pass

    def test_registration_create_invitation(self):
        """Test case for registration_create_invitation

        Create an invitation for a user and send it over via email  # noqa: E501
        """
        pass

    def test_registration_debug(self):
        """Test case for registration_debug

        Debug endpoint.  # noqa: E501
        """
        pass

    def test_registration_validate_registration_data(self):
        """Test case for registration_validate_registration_data

        Check if the registered E-mail isn't already used and if the password is strong enough  # noqa: E501
        """
        pass

    def test_runtime_environments_default(self):
        """Test case for runtime_environments_default

        Get a list of all runtime environments  # noqa: E501
        """
        pass

    def test_security_check(self):
        """Test case for security_check

        """
        pass

    def test_shadow_assignments_create(self):
        """Test case for shadow_assignments_create

        Create new shadow assignment in given group.  # noqa: E501
        """
        pass

    def test_shadow_assignments_create_points(self):
        """Test case for shadow_assignments_create_points

        Create new points for shadow assignment and user.  # noqa: E501
        """
        pass

    def test_shadow_assignments_detail(self):
        """Test case for shadow_assignments_detail

        Get details of a shadow assignment  # noqa: E501
        """
        pass

    def test_shadow_assignments_remove(self):
        """Test case for shadow_assignments_remove

        Delete shadow assignment  # noqa: E501
        """
        pass

    def test_shadow_assignments_remove_points(self):
        """Test case for shadow_assignments_remove_points

        Remove points of shadow assignment.  # noqa: E501
        """
        pass

    def test_shadow_assignments_update_detail(self):
        """Test case for shadow_assignments_update_detail

        Update details of an shadow assignment  # noqa: E501
        """
        pass

    def test_shadow_assignments_update_points(self):
        """Test case for shadow_assignments_update_points

        Update detail of shadow assignment points.  # noqa: E501
        """
        pass

    def test_shadow_assignments_validate(self):
        """Test case for shadow_assignments_validate

        Check if the version of the shadow assignment is up-to-date.  # noqa: E501
        """
        pass

    def test_sis_bind_group(self):
        """Test case for sis_bind_group

        Bind an existing local group to a SIS group  # noqa: E501
        """
        pass

    def test_sis_create_group(self):
        """Test case for sis_create_group

        Create a new group based on a SIS group  # noqa: E501
        """
        pass

    def test_sis_delete_term(self):
        """Test case for sis_delete_term

        Delete a term  # noqa: E501
        """
        pass

    def test_sis_edit_term(self):
        """Test case for sis_edit_term

        Set details of a term  # noqa: E501
        """
        pass

    def test_sis_get_terms(self):
        """Test case for sis_get_terms

        Get a list of all registered SIS terms  # noqa: E501
        """
        pass

    def test_sis_possible_parents(self):
        """Test case for sis_possible_parents

        Find groups that can be chosen as parents of a group created from given SIS group by current user  # noqa: E501
        """
        pass

    def test_sis_register_term(self):
        """Test case for sis_register_term

        Register a new term  # noqa: E501
        """
        pass

    def test_sis_status(self):
        """Test case for sis_status

        """
        pass

    def test_sis_subscribed_courses(self):
        """Test case for sis_subscribed_courses

        Get all courses subscirbed by a student and corresponding ReCodEx groups. Organizational and archived groups are filtered out from the result. Each course holds bound group IDs and group objects are returned in a separate array. Whole ancestral closure of groups is returned, so the webapp may properly assemble hiarichial group names.  # noqa: E501
        """
        pass

    def test_sis_supervised_courses(self):
        """Test case for sis_supervised_courses

        Get supervised SIS courses and corresponding ReCodEx groups. Each course holds bound group IDs and group objects are returned in a separate array. Whole ancestral closure of groups is returned, so the webapp may properly assemble hiarichial group names.  # noqa: E501
        """
        pass

    def test_sis_unbind_group(self):
        """Test case for sis_unbind_group

        Delete a binding between a local group and a SIS group  # noqa: E501
        """
        pass

    def test_submission_failures_default(self):
        """Test case for submission_failures_default

        List all submission failures, ever  # noqa: E501
        """
        pass

    def test_submission_failures_detail(self):
        """Test case for submission_failures_detail

        Get details of a failure  # noqa: E501
        """
        pass

    def test_submission_failures_resolve(self):
        """Test case for submission_failures_resolve

        Mark a submission failure as resolved  # noqa: E501
        """
        pass

    def test_submission_failures_unresolved(self):
        """Test case for submission_failures_unresolved

        List all unresolved submission failures  # noqa: E501
        """
        pass

    def test_submit_can_submit(self):
        """Test case for submit_can_submit

        Check if the given user can submit solutions to the assignment  # noqa: E501
        """
        pass

    def test_submit_pre_submit(self):
        """Test case for submit_pre_submit

        Pre submit action which will, based on given files, detect possible runtime environments for the assignment. Also it can be further used for entry points and other important things that should be provided by user during submit.  # noqa: E501
        """
        pass

    def test_submit_resubmit(self):
        """Test case for submit_resubmit

        Resubmit a solution (i.e., create a new submission)  # noqa: E501
        """
        pass

    def test_submit_resubmit_all(self):
        """Test case for submit_resubmit_all

        Start async job that resubmits all submissions of an assignment. No job is started when there are pending resubmit jobs for the selected assignment. Returns list of pending async jobs (same as GET call)  # noqa: E501
        """
        pass

    def test_submit_resubmit_all_async_job_status(self):
        """Test case for submit_resubmit_all_async_job_status

        Return a list of all pending resubmit async jobs associated with given assignment. Under normal circumstances, the list shoul be either empty, or contian only one job.  # noqa: E501
        """
        pass

    def test_submit_submit(self):
        """Test case for submit_submit

        Submit a solution of an assignment  # noqa: E501
        """
        pass

    def test_uploaded_files_append_partial(self):
        """Test case for uploaded_files_append_partial

        Add another chunk to partial upload.  # noqa: E501
        """
        pass

    def test_uploaded_files_cancel_partial(self):
        """Test case for uploaded_files_cancel_partial

        Cancel partial upload and remove all uploaded chunks.  # noqa: E501
        """
        pass

    def test_uploaded_files_complete_partial(self):
        """Test case for uploaded_files_complete_partial

        Finalize partial upload and convert the partial file into UploadFile. All data chunks are extracted from the store, assembled into one file, and is moved back into the store.  # noqa: E501
        """
        pass

    def test_uploaded_files_content(self):
        """Test case for uploaded_files_content

        Get the contents of a file  # noqa: E501
        """
        pass

    def test_uploaded_files_detail(self):
        """Test case for uploaded_files_detail

        Get details of a file  # noqa: E501
        """
        pass

    def test_uploaded_files_digest(self):
        """Test case for uploaded_files_digest

        Compute a digest using a hashing algorithm. This feature is intended for upload checksums only. In the future, we might want to add algorithm selection via query parameter (default is SHA1).  # noqa: E501
        """
        pass

    def test_uploaded_files_download(self):
        """Test case for uploaded_files_download

        Download a file  # noqa: E501
        """
        pass

    def test_uploaded_files_download_supplementary_file(self):
        """Test case for uploaded_files_download_supplementary_file

        Download supplementary file  # noqa: E501
        """
        pass

    def test_uploaded_files_start_partial(self):
        """Test case for uploaded_files_start_partial

        Start new upload per-partes. This process expects the file is uploaded as a sequence of PUT requests, each one carrying a chunk of data. Once all the chunks are in place, the complete request assembles them together in one file and transforms UploadPartialFile into UploadFile entity.  # noqa: E501
        """
        pass

    def test_uploaded_files_upload(self):
        """Test case for uploaded_files_upload

        Upload a file  # noqa: E501
        """
        pass

    def test_user_calendars_create_calendar(self):
        """Test case for user_calendars_create_calendar

        Create new iCal token for a particular user.  # noqa: E501
        """
        pass

    def test_user_calendars_default(self):
        """Test case for user_calendars_default

        Get calendar values in iCal format that correspond to given token.  # noqa: E501
        """
        pass

    def test_user_calendars_expire_calendar(self):
        """Test case for user_calendars_expire_calendar

        Set given iCal token to expired state. Expired tokens cannot be used to retrieve calendars.  # noqa: E501
        """
        pass

    def test_user_calendars_user_calendars(self):
        """Test case for user_calendars_user_calendars

        Get all iCal tokens of one user (including expired ones).  # noqa: E501
        """
        pass

    def test_users_all_groups(self):
        """Test case for users_all_groups

        Get a list of all groups for a user  # noqa: E501
        """
        pass

    def test_users_create_local_account(self):
        """Test case for users_create_local_account

        If user is registered externally, add local account as another login method. Created password is empty and has to be changed in order to use it.  # noqa: E501
        """
        pass

    def test_users_default(self):
        """Test case for users_default

        Get a list of all users matching given filters in given pagination rage. The result conforms to pagination protocol.  # noqa: E501
        """
        pass

    def test_users_delete(self):
        """Test case for users_delete

        Delete a user account  # noqa: E501
        """
        pass

    def test_users_detail(self):
        """Test case for users_detail

        Get details of a user account  # noqa: E501
        """
        pass

    def test_users_groups(self):
        """Test case for users_groups

        Get a list of non-archived groups for a user  # noqa: E501
        """
        pass

    def test_users_instances(self):
        """Test case for users_instances

        Get a list of instances where a user is registered  # noqa: E501
        """
        pass

    def test_users_invalidate_tokens(self):
        """Test case for users_invalidate_tokens

        Invalidate all existing tokens issued for given user  # noqa: E501
        """
        pass

    def test_users_list_by_ids(self):
        """Test case for users_list_by_ids

        Get a list of users based on given ids.  # noqa: E501
        """
        pass

    def test_users_remove_external_login(self):
        """Test case for users_remove_external_login

        Remove external ID of given authentication service.  # noqa: E501
        """
        pass

    def test_users_set_role(self):
        """Test case for users_set_role

        Set a given role to the given user.  # noqa: E501
        """
        pass

    def test_users_update_external_login(self):
        """Test case for users_update_external_login

        Add or update existing external ID of given authentication service.  # noqa: E501
        """
        pass

    def test_users_update_profile(self):
        """Test case for users_update_profile

        Update the profile associated with a user account  # noqa: E501
        """
        pass

    def test_users_update_settings(self):
        """Test case for users_update_settings

        Update the profile settings  # noqa: E501
        """
        pass

    def test_users_update_ui_data(self):
        """Test case for users_update_ui_data

        Update the user-specific structured UI data  # noqa: E501
        """
        pass

    def test_worker_files_download_supplementary_file(self):
        """Test case for worker_files_download_supplementary_file

        Sends over an exercise supplementary file (a data file required by the tests).  # noqa: E501
        """
        pass


if __name__ == '__main__':
    unittest.main()
