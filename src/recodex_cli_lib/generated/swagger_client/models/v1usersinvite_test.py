# coding: utf-8

"""
    ReCodEx API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V1usersinviteTest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'nested1': 'str',
        'nested2': 'str',
        'nested_obj': 'V1usersinviteTestNestedObj'
    }

    attribute_map = {
        'nested1': 'nested1',
        'nested2': 'nested2',
        'nested_obj': 'nestedObj'
    }

    def __init__(self, nested1=None, nested2=None, nested_obj=None):  # noqa: E501
        """V1usersinviteTest - a model defined in Swagger"""  # noqa: E501
        self._nested1 = None
        self._nested2 = None
        self._nested_obj = None
        self.discriminator = None
        if nested1 is not None:
            self.nested1 = nested1
        if nested2 is not None:
            self.nested2 = nested2
        if nested_obj is not None:
            self.nested_obj = nested_obj

    @property
    def nested1(self):
        """Gets the nested1 of this V1usersinviteTest.  # noqa: E501


        :return: The nested1 of this V1usersinviteTest.  # noqa: E501
        :rtype: str
        """
        return self._nested1

    @nested1.setter
    def nested1(self, nested1):
        """Sets the nested1 of this V1usersinviteTest.


        :param nested1: The nested1 of this V1usersinviteTest.  # noqa: E501
        :type: str
        """

        self._nested1 = nested1

    @property
    def nested2(self):
        """Gets the nested2 of this V1usersinviteTest.  # noqa: E501


        :return: The nested2 of this V1usersinviteTest.  # noqa: E501
        :rtype: str
        """
        return self._nested2

    @nested2.setter
    def nested2(self, nested2):
        """Sets the nested2 of this V1usersinviteTest.


        :param nested2: The nested2 of this V1usersinviteTest.  # noqa: E501
        :type: str
        """

        self._nested2 = nested2

    @property
    def nested_obj(self):
        """Gets the nested_obj of this V1usersinviteTest.  # noqa: E501


        :return: The nested_obj of this V1usersinviteTest.  # noqa: E501
        :rtype: V1usersinviteTestNestedObj
        """
        return self._nested_obj

    @nested_obj.setter
    def nested_obj(self, nested_obj):
        """Sets the nested_obj of this V1usersinviteTest.


        :param nested_obj: The nested_obj of this V1usersinviteTest.  # noqa: E501
        :type: V1usersinviteTestNestedObj
        """

        self._nested_obj = nested_obj

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1usersinviteTest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1usersinviteTest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
